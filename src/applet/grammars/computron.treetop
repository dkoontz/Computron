grammar Computron
  rule expression
    command
    /
    label_line
    /
    alias
    /
    comment
    /
    empty_line
  end
	
  rule comment
    '#' .* {
      def eval(environment)
        environment[:current_line] += 1
      end
    }
  end

  rule command
    copy
    /
    math_operation
    /
    compare
    /
    conditional
    /
    show
    /
    info
  end

  rule math_operation
    add
    /
    subtract
    /
    multiply
    /
    divide_full
    /
    divide
  end
  
  rule conditional
    jump
    /
    jump_if_greater
    /
    jump_if_less
    /
    jump_if_equal
  end

  rule jump
    'jump' space+ target:label {
      def eval(environment)
        environment[:current_line] = environment[:label_line_numbers][target.eval]
      end
    }
  end

  rule jump_if_equal
    'jump_if_equal' space+ target:label {
      def eval(environment)
        environment[:current_line] = environment[:label_line_numbers][target.eval] if :equal == environment[:last_result]
      end
    }
  end
  
  rule jump_if_less
    'jump_if_less' space+ target:label {
      def eval(environment)
        environment[:current_line] = environment[:label_line_numbers][target.eval] if :less == environment[:last_result]
      end
    }
  end

  rule jump_if_greater
    'jump_if_greater' space+ target:label {
      def eval(environment)
        environment[:current_line] = environment[:label_line_numbers][target.eval] if :greater == environment[:last_result]
      end
    }
  end

  rule compare
    'compare' space+ left_location:shape_location space+ right_location:shape_location {
      def eval(environment)
        environment[:last_result] = if (left_location.eval(environment) == right_location.eval(environment))
          :equal
        elsif (left_location.eval(environment) < right_location.eval(environment))
          :less
        elsif (left_location.eval(environment) > right_location.eval(environment))
          :greater
        end
        environment[:current_line] += 1
      end
    }
  end

  rule copy
    'copy' space+ from:(any_location / number) space+ to:any_location {
      def eval(environment)
        environment[to.name(environment)] = from.eval(environment)
        environment[:current_line] += 1
      end
    }
  end

  rule multiply
    'multiply' {
      def eval(environment)
        environment[:result] = environment[:triangle] * environment[:square]
        environment[:current_line] += 1
      end
    }
  end

  rule divide_full
    'divide_full' {
      def eval(environment)
        environment[:result] = environment[:triangle] / environment[:square]
        environment[:hexagon] = environment[:triangle] % environment[:square]
        environment[:current_line] += 1
      end
    }
  end

  rule divide
    'divide' {
      def eval(environment)
        environment[:result] = environment[:triangle] / environment[:square]
        environment[:current_line] += 1
      end
    }
  end

  rule add
    'add' {
      def eval(environment)
        environment[:result] = environment[:triangle] + environment[:square]
        environment[:current_line] += 1
      end
    }
  end

  rule subtract
    'subtract' {
      def eval(environment)
        environment[:result] = environment[:triangle] - environment[:square]
        environment[:current_line] += 1
      end
    }
  end

  rule show
    'show' space+ location:any_location {
      def eval(environment)
        environment[:log] << "#{location.text_value}: #{location.eval(environment)}"
        environment[:current_line] += 1
      end
    }
  end

  rule info
    'info' {
      def eval(environment)
        environment[:log] << "Log ============"
        sort_order = {:triangle => 0, :square => 1, :hexagon => 2, :star => 3, :input_a => 4, :input_b => 5, :output => 6, :result => 7}
          environment[:log] << environment.keys.
                                         reject {|key| [:log, :current_line, :label_line_numbers, :last_result, :alias].member? key}.
                                         sort_by{|key| sort_order[key] || 100 + /memory_address_(\d+)/.match(key.to_s)[1].to_i}.
                                         map do |key|
          text = "#{key}: #{environment[key]}"
          address = /memory_address_(\d+)/.match(text)
          text.gsub!(/memory_address_\d+/, "[#{address[1]}]") unless address.nil?
          text
        end
        environment[:log].flatten
        environment[:log] << "End Log========="
        environment[:current_line] += 1
      end
    }
  end

  rule any_location
    shape_location
    /
    memory_location {
      def name(environment)
        ("memory_address_" + value(environment).to_s).intern
      end
        
      def eval(environment)
        environment[:current_line] += 1
      end
    }
    /
    miscellaneous_location {
      def name(environment = {})
        text_value.intern       
      end
      
      def eval(environment)
        environment[name]
      end
    }
  end

  rule shape_location
    "triangle" <ShapeNode>
    /
    "square" <ShapeNode>
    /
    "hexagon" <ShapeNode>
    /
    "star" <ShapeNode>
  end

  rule memory_location
    '[' space* number space* ']' {
      def value(environment)
        number.eval(environment)        
      end
    }
    /
    '[' space* shape_location space* ']' {
      def value(environment)
        environment[shape_location.text_value.intern].to_s
      end
    }
    /
    '[' space* miscellaneous_location space* ']' {
      def value(environment)
        environment[miscellaneous_location.text_value.intern].to_s
      end
    }
  end

  rule miscellaneous_location
    "result" / "input_a" / "input_b" / "output"
  end

  rule alias
    'alias' space+ original:shape_location space+ new:character+ {
      def eval(environment)
        environment[:alias][new.text_value] = original.name.to_s
        environment[:current_line] += 1
      end
    }
  end

  rule label_line
    label space* {
      def eval(environment)
        environment[:current_line] += 1
      end
    }
  end

  rule label
    ':' character+ {
      def eval(environment = {})
        text_value
      end
    }
  end

  rule empty_line
    space* {
      def eval(environment)
        environment[:current_line] += 1
      end
    }
  end

  rule number
    '-'? [0-9]* {
      def eval(environment = {})
        text_value.to_i
      end
    }
  end

  rule space
    [ \t\n\r]+
  end
  
  rule eol
    [\n\r]+
  end
       
  rule character
    [a-zA-Z_]
  end
end